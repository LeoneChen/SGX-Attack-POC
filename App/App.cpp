#include <iostream>
#include <string>
#include "sgx_urts.h"
#include "Enclave_u.h" // Headers for untrusted part (autogenerated by edger8r)

using namespace std;

# define MAX_PATH FILENAME_MAX
# define ENCLAVE_FILENAME "enclave.signed.so"

// ocalls for printing string (C++ ocalls)
void ocall_print_error(const char *str) {
    cerr << str << endl;
}

void ocall_print_string(const char *str) {
    cout << str;
}

void ocall_println_string(const char *str) {
    cout << str << endl;
}

// Application entry
int main(int argc, char *argv[]) {
    const char *dbname = (argc != 2) ? "a.db" : argv[1];

    sgx_enclave_id_t eid = 0;
    char token_path[MAX_PATH] = {'\0'};
    sgx_launch_token_t token = {0};
    sgx_status_t ret = SGX_ERROR_UNEXPECTED; // status flag for enclave calls
    int updated = 0;
    string input;

    // Initialize the enclave
    ret = sgx_create_enclave(ENCLAVE_FILENAME, SGX_DEBUG_FLAG, &token, &updated, &eid, NULL);
    if (ret != SGX_SUCCESS) {
        cerr << "[sgx_create_enclave] Error: 0x" << hex << ret << endl;
        return -1;
    }
    cout << "Info: SQLite SGX enclave successfully created." << endl;

    // Open SQLite database
    ret = ecall_opendb(eid, dbname);
    if (ret != SGX_SUCCESS) {
        cerr << "[ecall_open] Error: 0x" << hex << ret << endl;
        goto out;
    }

    cout << "Enter SQL statement to execute or 'quit' to exit: " << endl << "> ";
    while (getline(cin, input)) {
        if (input == "quit") break;
        const char *sql = input.c_str();
        ret = ecall_execute_sql(eid, sql);
        if (ret != SGX_SUCCESS) {
            cerr << "[ecall_execute_sql] Error: 0x" << hex << ret << endl;
            goto out;
        }
        cout << "> ";
    }

    // Closing SQLite database inside enclave
    ret = ecall_closedb(eid);
    if (ret != SGX_SUCCESS) {
        cerr << "[ecall_closedb] Error: 0x" << hex << ret << endl;
        goto out;
    }

    ecall_show_log(eid);
    out:
    // Destroy the enclave
    sgx_destroy_enclave(eid);
    if (ret != SGX_SUCCESS) {
        cerr << "[sgx_destroy_enclave]Error: 0x" << hex << ret << endl;
        return -1;
    }

    cout << "Info: SQLite SGX enclave successfully returned." << endl;
    return 0;
}
